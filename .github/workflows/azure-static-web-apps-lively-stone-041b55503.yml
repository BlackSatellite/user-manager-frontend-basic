name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - master # Убедитесь, что это ваша основная ветка. Если у вас 'main', измените здесь.
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - master # Убедитесь, что это ваша основная ветка. Если у вас 'main', измените здесь.

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    permissions:
      id-token: write # Необходим для OIDC, даже если вы используете токен развертывания
      contents: read # Нужен для чтения содержимого репозитория

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          lfs: false

      # Удалены шаги "Install OIDC Client" и "Get Id Token"
      # GitHub Actions сам обрабатывает получение токенов для Azure/static-web-apps-deploy@v1,
      # используя secrets.AZURE_STATIC_WEB_APPS_API_TOKEN.
      # Эти шаги обычно нужны для более сложных кастомных OIDC-сценариев.

      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          # Используйте имя секрета, которое Azure автоматически сгенерировал.
          # В вашем случае, это: AZURE_STATIC_WEB_APPS_API_TOKEN_LIVELY_STONE_041B55503
          # Если вы создавали новый SWA, имя токена может быть другим,
          # проверьте его в Azure Portal -> Static Web App -> Deployment tokens.
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_LIVELY_STONE_041B55503 }}
          action: "upload"
          
          # Путь к вашей корневой папке фронтенд-приложения в репозитории.
          # Если ваш Vite-проект находится в корне репозитория, используйте "/".
          # Если он в подпапке, например, "frontend", то укажите "frontend".
          app_location: "/" 
          
          # Путь к исходному коду вашего API. Оставляем пустым, т.к. API развернут отдельно.
          api_location: "" 
          
          # Путь к папке со скомпилированными файлами фронтенда относительно app_location.
          # Для Vite это обычно 'dist'.
          output_location: "./" 
          
          # Позволяем Oryx (система сборки SWA) выполнить 'npm install' и 'npm run build'.
          # Если вы хотите выполнять эти шаги вручную до этого действия, установите true.
          skip_app_build: false 
          
          # Не пытаемся собрать API, так как он отдельный.
          skip_api_build: true

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          # Используйте то же имя секрета для закрытия Pull Request environment
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_LIVELY_STONE_041B55503 }}
          action: "close"
